cmake_minimum_required(VERSION 2.8.12)
project(DEMO)



## show message
message(STATUS "message write here")


## platform
if(APPLE)
    # no warning
    # https://stackoverflow.com/questions/31561309/cmake-warnings-under-os-x-macosx-rpath-is-not-specified-for-the-following-targe
    set(CMAKE_MACOSX_RPATH 0)
endif()
if(WIN32)
endif()


## ?
set(CMAKE_CXX_STANDARD 11)


## add .h headers located directorys
# not include_directories(${CMAKE_CURRENT_SOURCE_DIR})
target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/inlcude)

## add .cpp src files
target_sources(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src/u16string_bytes.cpp)

## add libs located directorys,
# besides you must use target_link_libraries() to specific lib
link_directories(${CMAKE_CURRENT_SOURCE_DIR})


## add source code compile options, same with -fPIC
# most time use PRIVATE
# https://stackoverflow.com/questions/23995019/what-is-the-modern-method-for-setting-general-compile-flags-in-cmake
# not use set(CMAKE_CXX_FLAGS "")
# not use add_compile_options()
target_compile_options(${PROJECT_NAME} PRIVATE -fPIC)


## link other librarys, same with -ldl -liconv
target_link_libraries(${PROJECT_NAME} dl)
target_link_libraries(${PROJECT_NAME} iconv)


## add other library for static link
# first add_subdirectory(), then target_link_libraries()
if (NOT TARGET other_library)
    add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/../  build_other_library)
endif ()
target_link_libraries(${PROJECT_NAME} other_library)


## copy generate binary file, post build
add_custom_command(
TARGET ${PROJECT_NAME} POST_BUILD
COMMAND ${CMAKE_COMMAND} -E copy_if_different $<TARGET_FILE:${PROJECT_NAME}> ../>
)


## set the generate binary file externtion
set(CMAKE_SHARED_LIBRARY_SUFFIX ".pyd")



## PUBLIC PRIVATE INTERFACE
# https://docs.google.com/presentation/d/18fY0zDtJCMUW5WdY2ZOfKtvb7lXEbBPFe_I6MNJC0Qw/edit#slide=id.g15c9891529_0_31
# same with https://github.com/toeb/moderncmake/blob/772c45522e4fcc48f3d6cfdc9386981dfb75a8dc/Modern%20CMake.pdf
# https://stackoverflow.com/questions/26037954/cmake-target-link-libraries-interface-dependencies
# https://cmake.org/pipermail/cmake/2016-May/063400.html

## python dev
# use `python-config --prefix` to get python path, not use
# find_package() in python builtin module.
# a useage to see:
# https://github.com/fooofei/py_string_address/blob/57991beef2a0379adeb252c6225b17dc1fb61588/CMakeLists.txt



## builds
# mkdir build
# cd build
# cmake -DCMAKE_BUILD_TYPE=Debug ..

## build config
-DCMAKE_BUILD_TYPE=Debug/Release
-DCMAKE_CXX_COMPILER=/usr/local/bin/afl-clang++
-DCMAKE_C_COMPILER=/usr/local/bin/afl-clang


## current CMakeLists.txt directory
# CMAKE_HOME_DIRECTORY not reliable, it can be other CMakeLists.txt directory
add_library(${PROJECT_NAME} STATIC ${CMAKE_CURRENT_SOURCE_DIR}/src/*.cpp)


## helper function
function(print_all_variables)
    get_cmake_property(_variableNames VARIABLES)
    foreach (_variableName ${_variableNames})
        message(STATUS "${_variableName}=${${_variableName}}")
    endforeach()
endfunction()


## helper macros
macro(append_variable dest args)
    set(${dest} "${${dest}}${args}")
endmacro()

macro(append_cflags args)
    #string(APPEND CMAKE_C_FLAGS ${args})
    append_variable(CMAKE_C_FLAGS ${args})
endmacro()

macro(append_cxxflags args)
    #string(APPEND CMAKE_CXX_FLAGS ${args})
    append_variable(CMAKE_CXX_FLAGS ${args})
endmacro()

macro(append_cflags_debug args)
    #string(APPEND CMAKE_C_FLAGS_DEBUG ${args})
    append_variable(CMAKE_C_FLAGS_DEBUG ${args})
endmacro()

macro(append_cflags_release args)
    #string(APPEND CMAKE_C_FLAGS_RELEASE ${args})
    append_variable(CMAKE_C_FLAGS_RELEASE ${args})
endmacro()

macro(append_cxxflags_debug args)
    #string(APPEND CMAKE_CXX_FLAGS_DEBUG ${args})
    append_variable(CMAKE_CXX_FLAGS_DEBUG ${args})
endmacro()

macro(append_cxxflags_release args)
    #string(APPEND CMAKE_CXX_FLAGS_RELEASE ${args})
    append_variable(CMAKE_CXX_FLAGS_RELEASE ${args})
endmacro()
